{
	
	"import": {
		"prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importNoModuleName": {
		"prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "importDestructing": {
		"prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
		"prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
		"prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportDefault": {
		"prefix": "exp",
    "body": "export default $1$0"
  },
  "exportDestructing": {
		"prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "exportAs": {
		"prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportNamedFunction": {
		"prefix": "enf",
    "body": [
			"export const ${1:functionName} = (${2:params}) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Export named function in ES7 syntax"
  },
  "exportDefaultFunction": {
		"prefix": "edf",
    "body": ["export default (${1:params}) => {", "\t$0", "}", ""],
    "description": "Export default function in ES7 syntax"
  },
  "method": {
		"prefix": "met",
    "body": ["${1:methodName} = (${2:params}) => {", "\t${0}", "}", ""],
    "description": "Creates a method inside a class in ES7 syntax"
	},
	"consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group(\"${1:label}\")",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group()."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object}', ${1:object})",
    "description": "Logs property with name."
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": "console.time('${1:object}')",
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd('${1:object}')",
    "description": "Console time end wrapper"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "destructProps": {
    "prefix": "cp",
    "body": ["const { $1 } = this.props"],
    "description": "Creates and assigns a local variable using props destructing"
	},
	"asyncMethod": {
		"prefix": "amet",
		"body": [
			" async ${1:method}({2:params}) {",
			"  $3",
			"}"
		],
		"description": "asyncMethod"
	},
	"createServerExpressStructured": {
		"prefix": "be-server",
		"body": [
			"const express = require('express');",
			"",
			"const ${1:server} = express();",
			"",
			"${1:server}.use(express.json());",
			"",
			"const port = 3000;",
			"",
			"${1:server}.get('/', (req, res) => json({message: 'Hello World!'}));",
			"",
			"${1:server}.listen(port);"
		],
		"description": "Create an express server in structured pattern. || Cria um server express estruturado."
	},
	"createFileRoutes.js": {
		"prefix": "fgr",
		"body": [
			"import { Router } from 'express';",
			"",
			"const ${1:routes} = new Router();",
			"",
			"",
			"export default ${1:routes};"
		],
		"description": " Creates routes.js || Cria routes.js"
	},
	"createStructuredRoute": {
		"prefix": "egr",
		"body": [
			"${1:app}.${2:get}('/${3:rotas}', (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Create a structured Get route || Cria uma rota Get estruturada."
	},
	"createRouteWitdhParams": {
		"prefix": "gerp",
		"body": [
			"${1:app}.${2:get}('/${3:rotas}', (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Create a structured route with middleware."
	},

	"createRouteWitdhParamsMiddwares": {
		"prefix": "gerpm",
		"body": [
			"${1:app}.${2:get}('/${3:rotas}', ${4:middleware}, (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Create a structured route with middleware."
	},
	"create-a-route-mvc": {
		"prefix": "be-gr",
		"body": [
			"${1:routes}.${2:get}('/${3:rotas}', ${4:Rota}Controller.${5:index});",
			""
		],
		"description": "Create an MVC index route || Cria uma rota index MVC"
	},
	"create-a-route-mvc-params": {
		"prefix": "be-grp",
		"body": [
			"${1:routes}.{2:get}('/${3:rotas}/${4:id}', ${5:Rota}Controller.${6:index});",
			""
		],
		"description": "Create an MVC index route || Cria uma rota index MVC"
	},
	"create-a-route-mvc-params-middware": {
		"prefix": "be-grpm",
		"body": [
			"${1:routes}.${2:get}('/${3:rotas}/${4:id}', ${5:midware} , ${6:Rota}Controller.${7:index});",
			""
		],
		"description": "Create an MVC index route || Cria uma rota index MVC"
	},

	"createClass": {
		"prefix": "be-cc",
		"body": [
			"class $TM_FILENAME_BASE {",
			"",
			"}",
			"",
			"export default new $TM_FILENAME_BASE();"
		],
		"description": "createClass"
	},

	"createClassExtends": {
		"prefix": "be-cce",
		"body": [
			"class $TM_FILENAME_BASE extends ${1:Class}  {",
			"",
			"}",
			"",
			"export default new $TM_FILENAME_BASE();"
		],
		"description": "createClassExtends"
	},

	"config-model-sequelize": {
		"prefix": "be-csm",
		"body": [
			"import Sequelize, { Model } from 'sequelize';",
			"",
			"class $TM_FILENAME_BASE extends Model {",
			"  static init(sequelize) {",
			"    super.init(",
			"      {",
			"       \"//campos aqui\"",
			"      },",
			"      { sequelize }",
			"    );",
			"",
			"    return this;",
			"  }",
			"}",
			"",
			"export default $TM_FILENAME_BASE;"
		],
		"description": "Create a Sequelize model with config. || Cria uma model Sequelize com config"
	},

	"create-promise": {
		"prefix": "be-create-promise",
		"body": [
			"new Promise((resolve, reject) => {",
			"  let condition = false;",
			"  if(condition) {",
			"    resolve('data')",
			"  } else {",
			"    reject('error')",
			"}",
			"})"
		],
		"description": "Create a promise || Cria uma promise ."
	},

	"create-a-middleware-global": {
		"prefix": "be-middleware-global",
		"body": [
			"server.use(req, res, next) => {",
			"",
			"next();",
			"});"
		],
		"description": "Create structured global middleware. || Cria um middlware global"
	},
	"create-a-middleware-error": {
		"prefix": "be-error-middleware",
		"body": [
			"app.use(function(err, req, res, next) {",
			"  console.error(err.stack);",
			"  res.status(500).send('Algo Errado :/!');",
			"});"
		],
		"description": "Create structured error middleware. || Cria uma middleware de error estruturada"
	},
	"create-a-middleware-local": {
		"prefix": "be-middleware-local",
		"body": [
			"function ${1:functionName} (req, res, next) => {",
			"",
			"next();",
			"});"
		],
		"description": "Create local middleware on structured pattern || Cria uma middleware local no padrao estruturado."
	},
	"create-a-model-sequelize": {
		"prefix": "be-model-sequelize",
		"body": [
			"module.exports = (sequelize, DataTypes) => {",
			"  const $TM_FILENAME_BASE = sequelize.define('$TM_FILENAME_BASE', {",
			"  });",
			"",
			"  return $TM_FILENAME_BASE;",
			"}"
		],
		"description": "Creates a Sequelize model. || Cria uma model Sequelize."
	},

	"create-a-middleware-no-standard-mvc": {
		"prefix": "be-middleware-mvc",
		"body": [
			"export default async (req, res, next) => {",
			"  return next();",
			"}"
		],
		"description": " Create MVC middleware || Cria uma middleware no padr√£o MVC"
	}
}