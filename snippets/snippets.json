{

	"cria-uma-middleware-de-error": {
		"prefix": "be-error-middleware",
		"body": [
			"app.use(function(err, req, res, next) {",
			"  console.error(err.stack);",
			"  res.status(500).send('Algo Errado :/!');",
			"});"
		],
		"description": "Cria uma middleware de error"
	},
	
	"cria-uma-base-mongo": {
		"prefix": "be-mongo",
		"body": [
			"import mongoose from 'mongoose';",
			"",
			"const ${1:ExemploSchema} = new mongoose.Schema({",
			"   ",
			"});",
			"",
			"export default mongoose.model(' $TM_FILENAME_BASE',  ${1:ExemploSchema});"
		],
		"description": "Cria uma base mongo."
	},

	"cria-um-server-express-estruturado": {
		"prefix": "be-server",
		"body": [
			"const express = require('express');",
			"",
			"const server = express();",
			"",
			"server.use(express.json());",
			"",
			"const port = 3000;",
			"",
			"server.get('/', (req, res) => json({message: 'Hello World!'}))",
			"",
			"server.listen(port);"
		],
		"description": "Cria um server express no padrão estruturado."
	},
	"cria-promise": {
		"prefix": "be-cria-promise",
		"body": [
			"new Promise((resolve, reject) => {",
			"  let condition = false;",
			"  if(condition) {",
			"    resolve('data')",
			"  } else {",
			"    reject('error')",
			"}",
			"})"
		],
		"description": "Cria uma promise no padrão estruturado."
	},
	
	"cria-rotas-api-rest": {
		"prefix": "be-routes-apis-rest",
		"body": [
			"server.get('/${1:rotas}', middleware, (req, res) => {",
			"  res.json({});",
			"});",
			"",
			"server.post('/${1:rotas}', (req, res) => {",
			"  res.json({});",
			"});",
			"",
			"server.put('/${1:rotas}/:id', middleware, (req, res) => {",
			"  res.json({});",
			"});",
			"",
			"server.delete('/${1:rotas}/:id', middleware, (req, res) => {",
			"    res.json({});",
			"  });"
		],
		"description": "Cria todas as rotas, Api Rest"
	},
	"cria-uma-rota-get-estrturada": {
		"prefix": "be-get",
		"body": [
			"server.get('/${1:rotas}', (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Cria uma rota Get no padrão estrtuturado."
	},
	"cria-uma-rota-get-estrturada-middleware": {
		"prefix": "be-mget",
		"body": [
			"server.get('/${1:rotas}', ${2:middleware}, (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Cria uma rota Get no padrão estrtuturado com uma middleware."
	},
	"cria-uma-rota-post-estruturadaa": {
		"prefix": "be-post",
		"body": [
			"server.post('/${1:rotas}', (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Cria uma rota Post no padrão estrtuturado."
	},
	"cria-uma-rota-post-estrturada-middleware": {
		"prefix": "be-mpost",
		"body": [
			"server.post('/${1:rotas}', ${2:middleware}, (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Cria uma rota Post no padrão estrtuturado com uma middleware."
	},
	"cria-uma-rota-put-estruturada": {
		"prefix": "be-put",
		"body": [
			"server.put('/${1:rotas}/${2:id}', (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Cria uma rota Put no padrão estrtuturado."
	},
	"cria-uma-rota-put-estrturada-middleware": {
		"prefix": "be-mput",
		"body": [
			"server.put('/${1:rotas}/${2:id}', ${3:middleware}, (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Cria uma rota Put no padrão estrtuturado com uma middleware."
	},
	"cria-uma-rota-delete-estrturada": {
		"prefix": "be-delete",
		"body": [
			"server.delete('/${1:rotas}/${2:id}', (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Cria uma rota Delete no padrão estrtuturado."
	},
	"cria-uma-rota-delete-estrturada-middleware": {
		"prefix": "be-mdelete",
		"body": [
			"server.delete('/${1:rotas}/${2:id}', ${3:middleware}, (req, res) => {",
			"  res.json({});",
			"});"
		],
		"description": "Cria uma rota Delete no padrão estrtuturado com uma middleware."
	},
	
	"cria-uma-middleware-global": {
		"prefix": "be-middleware-global",
		"body": [
			"server.use(req, res, next) => {",
			"",
			"$1",
			"next();",
			"});"
		],
		"description": "Cria uma middleware global no padrão estruturado."
	},
	"cria-uma-middleware-local": {
		"prefix": "be-middleware-local",
		"body": [
			"function ${1:functionName} (req, res, next) => {",
			"",
			"$1",
			"next();",
			"});"
		],
		"description": "Cria uma middleware local no padrao estruturado."
	},
	
	"cria-um-model-sequelize": {
		"prefix": "be-model-sequelize",
		"body": [
			"module.exports = (sequelize, DataTypes) => {",
			"  const $TM_FILENAME_BASE = sequelize.define('$TM_FILENAME_BASE', {",
			"  });",
			"",
			"  return $TM_FILENAME_BASE;",
			"}"
		],
		"description": "Cria uma model Sequelize."
	},
	
	"estrutura-appjs-mvc": {
		"prefix": "be-app",
		"body": [
			"import express from 'express';",
			"import routes from './routes';",
			"",
			"// import './database';",
			"",
			"class App {",
			"  constructor() {",
			"    this.server = express();",
			"    this.middlewares();",
			"    this.routes();",
			"  }",
			"",
			"  middlewares() {",
			"    this.server.use(express.json());",
			"  }",
			"",
			"  routes() {",
			"    this.server.use(routes);",
			"  }",
			"}",
			"export default new App().server;"
		],
		"description": "Cria um arquivo app.js no modelo MVC."
	},
	
	"cria-uma-base-de-um-arquivo-de-routes.js-no-padrao-mvc": {
		"prefix": "be-fgr",
		"body": [
			"import { Router } from 'express';",
			"",
			"import ${2:Rota}Controller from '';",
			"",
			"const routes = new Router();",
			"",
			"routes.get('/${1:rotas}', ${2:Rota}Controller.index);",
			"routes.post('/${1:rotas}', ${3:Rota}Controller.store);",
			"routes.put('/${1:rotas}/:${2:id}', ${3:Rota}Controller.update);",
			"routes.delete('/${1:rotas}/:${2:id}', ${3:Rota}Controller.delete);",
			"",
			"",
			"export default routes;"
		],
		"description": "Cria um a base de um arquivo de routes.js no padrão MVC."
	},
	"Cria-todas-rotas-no-padrao-mvc": {
		"prefix": "be-gr",
		"body": [
			"routes.get('/${1:rotas}', ${2:Rota}Controller.index);",
			"routes.post('/${1:rotas}', ${3:Rota}Controller.store);",
			"routes.put('/${1:rotas}/:${2:id}', ${3:Rota}Controller.update);",
			"routes.delete('/${1:rotas}/:${2:id}', ${3:Rota}Controller.delete);"
		],
		"description": "Cria rotas no padrão MVC"
	},

	"cria-uma-rota-index-mvc": {
		"prefix": "be-gri",
		"body": [
			"routes.get('/${1:rotas}', ${2:Rota}Controller.index);",
			""
		],
		"description": "Cria uma rota index MVC"
	},

	"cria-uma-rota-post-mvc": {
		"prefix": "be-grpo",
		"body": [
			"routes.post('/${1:rotas}', ${2:Rota}Controller.store);",
			""
		],
		"description": "Cria uma rota post MVC"
	},

	"cria-uma-rota-put-mvc": {
		"prefix": "be-grpu",
		"body": [
			"routes.put('/${1:rotas}/:${2:id}', ${3:Rota}Controller.update);",
			""
		],
		"description": "Cria uma rota put MVC"
	},

	"cria-uma-rota-delete-mvc": {
		"prefix": "be-grd",
		"body": [
			"routes.delete('/${1:rotas}/:${2:id}', ${3:Rota}Controller.delete);",
			""
		],
		"description": "Cria uma rota delete MVC"
	},


	
	"cria-um-controller-no-modelo-mvc.": {
		"prefix": "be-gc",
		"body": [
			"import Model from '';",
			"",
			"class TM_FILENAME_BASE {",
			"    async index(req, res) {",
			"",
			"        return res.json({}); ",
			"    }",
			"    async store(req, res) {",
			"",
			"        return res.json({});",
			"    }",
			"",
			"    async update(req, res) {",
			"",
			"        return res.json({});",
			"    }",
			"",
			"    async delete(req, res) {",
			"",
			"        return res.json({});",
			"    }",
			"}",
			"",
			"export default new TM_FILENAME_BASE();",
			""
		],
		"description": "Cria um controller no modelo MVC."
	},
	
	"cria-uma-middleware-no-padrao-mvc": {
		"prefix": "be-middleware-mvc",
		"body": [
			"export default async (req, res, next) => {",
			"  $1",
			"  return next();",
			"}"
		],
		"description": "Cria uma middleware no padrao MVC"
	},
	
	"mvc-model-sequelize": {
		"prefix": "be-mvc-model-sequelize",
		"body": [
			"import Sequelize, { Model } from 'sequelize';",
			"",
			"class $TM_FILENAME_BASE extends Model {",
			"  static init(sequelize) {",
			"    super.init(",
			"      {",
			"       \"//campos aqui\"",
			"      },",
			"      { sequelize }",
			"    );",
			"",
			"    return this;",
			"  }",
			"}",
			"",
			"export default $TM_FILENAME_BASE;"
		],
		"description": "Cria uma model Sequelize no padrão MVC."
	}
}